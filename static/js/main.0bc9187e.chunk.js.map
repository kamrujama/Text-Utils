{"version":3,"sources":["components/Alert.js","images/pic.jpg","components/About.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alertMsg","className","type","role","toUpperCase","slice","msg","About","src","pic","alt","Navbar","mode","to","title","id","aboutText","class","onClick","setMode","for","TextForm","useState","text","setText","heading","value","onChange","event","target","style","backgroundColor","color","rows","toLowerCase","showAlert","length","upperText","lowerText","newText","document","getElementById","select","navigator","clipboard","writeText","split","join","defaultProps","App","alert","setAlert","txtColor","setTxtColor","message","setTimeout","setColors","body","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.0bc9187e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n  return (\r\n   \r\n    props.alertMsg && <div className={`alert alert-${props.alertMsg.type} alert-dismissible fade show`} role=\"alert\">\r\n      {/* {props.alert} */}\r\n      <strong>{props.alertMsg.type[0].toUpperCase() + props.alertMsg.type.slice(1)} !</strong> {props.alertMsg.msg}\r\n    </div>\r\n    \r\n   \r\n  )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/pic.f48cfa95.jpg\";","import React from 'react'\r\nimport pic from '../images/pic.jpg';\r\n// import '../App.css';\r\n\r\nexport default function About() {\r\n\r\n\r\n  return (\r\n    <>\r\n        <div className=\"container\">\r\n            <div className=\"heading\">\r\n                <h2>About Me</h2>\r\n            </div>\r\n            <div className=\"details\">\r\n                <div className=\"image\">\r\n                    <img src={pic} alt=\"\" />\r\n                </div>\r\n                <div className=\"information\">\r\n                <h2>Kamrujama Ansari</h2><span>Software Developer</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </>\r\n    \r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  \r\nreturn (\r\n    <>\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n          <div className=\"container-fluid\">\r\n            <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n              <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n              <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li className=\"nav-item\">\r\n                  <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                </li>\r\n              </ul>\r\n\r\n\r\n              {/* Dark Mode Toggle Button */}\r\n\r\n             \r\n\r\n              <div class=\"form-check form-switch\">\r\n                  <input class=\"form-check-input\" type=\"checkbox\" onClick={props.setMode} role=\"switch\" id=\"mode\" />\r\n                  <label class={`form-check-label text-${props.mode === 'light' ?'dark' : 'light'}`} for=\"mode\">Enable {props.mode === 'light' ?'dark' : 'light'} Mode</label>\r\n              </div>\r\n\r\n\r\n            </div>\r\n          </div>\r\n        </nav>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nNavbar.propTypes = {\r\n    title : PropTypes.string.isRequired,\r\n    aboutText : PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title : \"Text Utils\",\r\n    aboutText : \"About us\"\r\n}","\r\n\r\nimport React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpperCase = () => {\r\n        // console.log(\"You clicked this text\"+text)\r\n        if(text === text.toUpperCase() && text !== text.toLowerCase())\r\n            props.showAlert(\"Texts are already converted to uppercase.\",\"success\")\r\n\r\n        else if(text.length !== 0){\r\n            let upperText = text.toUpperCase()\r\n            setText(upperText)\r\n            props.showAlert(\"Text Converted to UpperCase\",\"success\")\r\n        }\r\n        else\r\n            props.showAlert(\"Box is empty, Nothing to convert in UpperCase\",\"success\")\r\n    }\r\n\r\n    const handleLowerCase = () => {\r\n        if(text === text.toLowerCase() && text !== text.toUpperCase())\r\n            props.showAlert(\"Texts are already in lowercase.\",\"success\")\r\n\r\n        else if(text.length !== 0){\r\n            let lowerText = text.toLowerCase()\r\n            setText(lowerText)\r\n            props.showAlert(\"Text Converted to LowerCase\",\"success\")\r\n        }\r\n       \r\n        else\r\n            props.showAlert(\"Box is empty. Nothing to convert in LowerCase\",\"success\")\r\n    }\r\n\r\n    const handleClear = () => {\r\n        if(text.length !== 0){\r\n            let newText = ''\r\n            setText(newText)\r\n            props.showAlert(\"All Text in the box is cleared\",\"success\")\r\n        }\r\n        else\r\n        props.showAlert(\"Box is already cleared. Nothing to clear.\",\"success\")\r\n    }\r\n\r\n    const handleCopy = ()=> {\r\n        // console.log(text)\r\n        if(text.length !== 0){\r\n            let newText = document.getElementById('textForm')\r\n            newText.select()\r\n            navigator.clipboard.writeText(newText.value)\r\n            props.showAlert(\"All text in the box is copied to clipboard\",\"success\")\r\n        }\r\n        else\r\n            props.showAlert(\"Box is empty. Nothing to copy.\",\"success\")\r\n    }\r\n\r\n    const handleSpace = ()=> {\r\n        if(text.split(' ').length > 1){\r\n            let newText = text.split(/[ ]+/);\r\n            setText(newText.join(\" \"))\r\n            props.showAlert(\"All Spaces are removed\",\"success\")\r\n        }\r\n        else if(text.split(' ').length === 1)\r\n            props.showAlert(\"There is only one word in the box. No Space can be removed.\",\"success\")\r\n        else\r\n            props.showAlert(\"Box is empty. No Spaces removed.\",\"success\")\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const [text, setText] = useState(\"\")\r\n\r\n  return (\r\n    <>\r\n    <div className=\"container\">\r\n        <h2>{props.heading}</h2>\r\n\r\n        <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value={text} id=\"textForm\" onChange={handleOnChange} style={{backgroundColor : props.mode === 'dark' ? '#042743' : 'white', color :props.mode === 'light' ? 'black' : 'white' }} rows=\"8\"></textarea>\r\n        </div>\r\n\r\n        <button className={`btn btn-${props.mode === 'light' ? 'primary' : 'dark'}`} onClick={handleUpperCase}>Convert to Uppercase</button>\r\n        <button className={`btn btn-${props.mode === 'light' ? 'primary' : 'dark'} m-2`} onClick={handleLowerCase}>Convert to Lowercase</button>\r\n        <button className={`btn btn-${props.mode === 'light' ? 'primary' : 'dark'} m-2`} onClick={handleClear}>Clear</button>\r\n        <button className={`btn btn-${props.mode === 'light' ? 'primary' : 'dark'} m-2`} onClick={handleCopy}>Click to Copy</button>\r\n        <button className={`btn btn-${props.mode === 'light' ? 'primary' : 'dark'} m-2`} onClick={handleSpace}>Remove Extra Space</button>\r\n\r\n    </div>\r\n    \r\n    <div className=\"container my-2\">\r\n        <h3>Your Text Summary</h3>\r\n        <p className='lead'><b>{text.split(\" \").length - 1}</b> word and <b>{text.length}</b> characters</p>\r\n        <p className='lead'> <b>{0.008 * text.split(\" \").length}</b> minute it will take to read</p>\r\n        <p className='lead'><b>{text.split(\". \").length - 1}</b> Sentences</p>\r\n        <p className='lead'><b>{text.split(\"\\n\").length - 1}</b> Paragraphs</p>\r\n        <h3>Your Text Preview</h3>\r\n        <p className='lead'>{text.length > 0 ? text : 'Enter your text in the above box for preview'}</p>\r\n    </div>\r\n\r\n    </>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\nimport './App.css';\nimport Alert from './components/Alert';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport { Routes, Route } from \"react-router-dom\";\n\n\nfunction App() {\n\n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n  const [txtColor, setTxtColor] = useState(null)\n\n  const showAlert = (message, type)=> {\n      setAlert({\n        msg : message,\n        type : type\n      });\n\n      setTimeout(() => {\n        setAlert(null)\n      },2000);\n  }\n\n  const setColors = () => {\n    if(txtColor === 'green'){\n      setTxtColor('green')\n       document.body.style.backgroundColor = 'green';\n       document.body.style.color = 'white'\n    }\n  }\n\n  const toggle = ()=> {\n\n    if(mode === 'green'){\n      setMode('green')\n      document.body.style.backgroundColor = 'green';\n      document.body.style.color = 'white'\n      showAlert(\"Green mode has been enabled\", \"success\")\n    }\n\n   else if(mode === 'light'){\n       setMode('dark')\n       document.body.style.backgroundColor = '#042743';\n       document.body.style.color = 'white'\n       document.title = 'Utils - Dark Mode'\n       showAlert(\"Dark mode has been enabled\", \"success\")\n   }\n\n   else{\n       setMode('light')\n       document.body.style.backgroundColor = 'white'\n       document.body.style.color = 'black'\n       document.title = 'Utils - Light Mode'\n       showAlert(\"Light mode has been enabled\", \"success\")\n   }\n  }\n\n  return (\n    <>\n\n        {/* Navbar componenet */}\n        <Navbar title=\"Text Editor\" txtColor = {txtColor} setColors = {setColors}  aboutText=\"About\" mode={mode} setMode={toggle}/>\n\n        {/* Alert component */}\n        <Alert  alertMsg={alert} />\n\n        {/* Text form component */}\n          {/* <TextForm showAlert = {showAlert} heading = \"Enter the text to analyze\" mode={mode} /> */}\n        \n        {/* About Component */}\n          {/* <About/> */}\n\n        <Routes>\n          <Route path=\"/\" element={<TextForm showAlert = {showAlert} heading = \"Enter the text to analyze\" mode={mode} />} />\n          <Route path=\"/about\" element={<About />} />\n        </Routes>\n      \n\n        \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from \"react-router-dom\";\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n</React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}